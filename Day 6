//ADD 2 ARRAYS
#include <stdio.h>

int main() {
    int n;
    printf("Enter the size of the arrays: ");
    scanf("%d", &n);

    int arr1[n], arr2[n], sum[n];

    printf("Enter elements of array 1: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr1[i]);
    }

    printf("Enter elements of array 2: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr2[i]);
    }

    // Add the two arrays
    for (int i = 0; i < n; i++) {
        sum[i] = arr1[i] + arr2[i];
    }

    printf("Sum of the two arrays: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", sum[i]);
    }
    printf("\n");

    return 0;
}
int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Initialize max and min with the first element
    int max = arr[0];
    int min = arr[0];

    // Find max and min
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min = arr[i];
        }
    }

    printf("Maximum element: %d\n", max);
    printf("Minimum element: %d\n", min);

    return 0;
}
int linearSearch(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target) {
            return i; // Return the index of the target element
        }
    }
    return -1; // Return -1 if the target element is not found
}

int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int target;
    printf("Enter the target element: ");
    scanf("%d", &target);

    int result = linearSearch(arr, n, target);

    if (result == -1) {
        printf("Target element not found in the array.\n");
    } else {
        printf("Target element found at index %d.\n", result);
    }

    return 0;
}

int linearSearch(int arr[], int n, int target) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == target) {
            return i; // Return the index of the target element
        }
    }
    return -1; // Return -1 if the target element is not found
}

C PROGRAM TO IMPLEMENT LINEAR SEARCH
#include <stdio.h>
int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int target;
    printf("Enter the target element: ");
    scanf("%d", &target);

    int result = linearSearch(arr, n, target);

    if (result == -1) {
        printf("Target element not found in the array.\n");
    } else {
        printf("Target element found at index %d.\n", result);
    }

    return 0;
}
C PROGRAM TO IMPLEMENT BINARY SEARCH
#include <stdio.h>

int binarySearch(int arr[], int n, int target) {
    int low = 0;
    int high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] == target) {
            return mid; // Return the index of the target element
        } else if (arr[mid] < target) {
            low = mid + 1; // Search in the right half
        } else {
            high = mid - 1; // Search in the left half
        }
    }

    return -1; // Return -1 if the target element is not found
}

int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements in ascending order:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int target;
    printf("Enter the target element: ");
    scanf("%d", &target);

    int result = binarySearch(arr, n, target);

    if (result == -1) {
        printf("Target element not found in the array.\n");
    } else {
        printf("Target element found at index %d.\n", result);
    }

    return 0;
}

C PROGRAM WHICH WILL ADD TWO DISTANCES GIVEN IN FEET USING STRUCTURE
#include <stdio.h>
// Define a structure to represent distance in feet
typedef struct {
    int feet;
} Distance;

// Function to add two distances
Distance addDistances(Distance d1, Distance d2) {
    Distance sum;
    sum.feet = d1.feet + d2.feet;
    return sum;
}

int main() {
    // Declare two distances
    Distance d1, d2;

    // Input the distances
    printf("Enter distance 1 in feet: ");
    scanf("%d", &d1.feet);

    printf("Enter distance 2 in feet: ");
    scanf("%d", &d2.feet);

    // Add the distances
    Distance sum = addDistances(d1, d2);

    // Print the result
    printf("Sum of the distances: %d feet\n", sum.feet);

    return 0;

C PROGRAM TO TAKE 5 BOOK'S NAME,ISBN NUMBER,PRICE USING STRUCTURE.
}#include <stdio.h>
#include <string.h>

// Define a structure to represent a book
typedef struct {
    char name[50];
    char isbn[20];
    float price;
} Book;

int main() {
    // Declare an array of 5 books
    Book books[5];

    // Input the book details
    for (int i = 0; i < 5; i++) {
        printf("Enter book %d details:\n", i + 1);
        printf("Name: ");
        fgets(books[i].name, sizeof(books[i].name), stdin);
        books[i].name[strcspn(books[i].name, "\n")] = 0; // Remove the newline character

        printf("ISBN: ");
        fgets(books[i].isbn, sizeof(books[i].isbn), stdin);
        books[i].isbn[strcspn(books[i].isbn, "\n")] = 0; // Remove the newline character

        printf("Price: ");
        scanf("%f", &books[i].price);
        getchar(); // Consume the newline character left in the input buffer
    }

    // Print the book details
    printf("\nBook Details:\n");
    for (int i = 0; i < 5; i++) {
        printf("Book %d:\n", i + 1);
        printf("Name: %s\n", books[i].name);
        printf("ISBN: %s\n", books[i].isbn);
        printf("Price: %.2f\n\n", books[i].price);
    }

    return 0;
}
